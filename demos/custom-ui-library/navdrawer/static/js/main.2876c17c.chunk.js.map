{"version":3,"sources":["modal/Modal.module.scss","navdrawer/Navdrawer.module.scss","backdrop/Backdrop.module.scss","backdrop/Backdrop.js","modal/Modal.js","navdrawer/Navdrawer.js","lena-2.jpg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Backdrop","show","hideHandler","classes","css","backdrop","hide","className","onClick","ReactDOM","createPortal","document","getElementById","Modal","blur_ref","useState","isInitRender","setIsInitRender","modal","cssClassList","setCssClassList","modal_ref","useRef","tl","useEffect","current","gsap","timeline","to","duration","background","filter","opacity","onReverseComplete","reverse","ref","xmlns","width","height","fill","viewBox","d","Navdrawer","navdrawer","navdrawer_ref","xPercent","App","showModal","setShowModal","showDrawer","setShowDrawer","src","i","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.2876c17c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__198BW\",\"hide\":\"Modal_hide__11Rw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navdrawer\":\"Navdrawer_navdrawer__3p1wC\",\"hide\":\"Navdrawer_hide__37RdW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__1SWXw\",\"hide\":\"Backdrop_hide__3yvaA\"};","import ReactDOM from 'react-dom';\n\nimport css from './Backdrop.module.scss';\n\n// ==============================================\n\nconst Backdrop = ({ show, hideHandler }) => {\n  // --------------------------------------------\n\n  const classes = `${css.backdrop} ${show ? '' : css.hide}`;\n\n  // --------------------------------------------\n\n  const backdrop = <div className={classes} onClick={hideHandler}></div>;\n  // --------------------------------------------\n\n  return ReactDOM.createPortal(\n    backdrop,\n    document.getElementById('backdrop-hook')\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default Backdrop;\n","import { useEffect, useState, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { gsap } from 'gsap';\n\nimport Backdrop from '../backdrop/Backdrop';\n\nimport css from './Modal.module.scss';\n\n// ==============================================\n\nconst Modal = ({ show, hideHandler, blur_ref }) => {\n  // --------------------------------------------\n\n  const [isInitRender, setIsInitRender] = useState(true);\n  const [animationReverseComplete, setAnimationReverseComplete] =\n    useState(true);\n  const [cssClassList, setCssClassList] = useState(css.modal);\n\n  // --------------------------------------------\n\n  const modal_ref = useRef();\n  const tl = useRef();\n\n  // --------------------------------------------\n\n  useEffect(() => {\n    if (show === true && isInitRender === false) {\n      setCssClassList(css.modal);\n\n      const duration = 0.5;\n\n      // gsap.to(blur_ref.current, config);\n      tl.current = gsap\n        .timeline()\n        .to(blur_ref.current, {\n          duration,\n          background: 'rgba(0, 0, 255, 0.75)',\n          filter: 'blur(3px)',\n        })\n        .to(\n          modal_ref.current,\n          {\n            duration,\n            opacity: 1,\n            onReverseComplete: () => {\n              setCssClassList(`${css.modal} ${css.hide}`);\n            },\n          },\n          '<'\n        );\n    } else if (show === false && isInitRender === false) {\n      if (tl) {\n        tl.current.reverse();\n      }\n    }\n\n    setIsInitRender(false);\n  }, [show]);\n\n  // --------------------------------------------\n\n  const modal = (\n    <>\n      <Backdrop show={show} hideHandler={hideHandler} />\n\n      <div ref={modal_ref} className={cssClassList}>\n        Modal\n        <svg\n          onClick={hideHandler}\n          xmlns='http://www.w3.org/2000/svg'\n          width='16'\n          height='16'\n          fill='currentColor'\n          viewBox='0 0 16 16'\n        >\n          <path d='M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z' />\n          <path d='M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z' />\n        </svg>\n      </div>\n    </>\n  );\n  // --------------------------------------------\n\n  return ReactDOM.createPortal(modal, document.getElementById('modal-hook'));\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default Modal;\n","import { useEffect, useState, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { gsap } from 'gsap';\n\nimport Backdrop from '../backdrop/Backdrop';\n\nimport css from './Navdrawer.module.scss';\n\n// ==============================================\n\nconst Navdrawer = ({ show, hideHandler, blur_ref }) => {\n  // --------------------------------------------\n\n  const [isInitRender, setIsInitRender] = useState(true);\n  const [animationReverseComplete, setAnimationReverseComplete] =\n    useState(true);\n  const [cssClassList, setCssClassList] = useState(css.navdrawer);\n\n  // --------------------------------------------\n\n  const navdrawer_ref = useRef();\n  const tl = useRef();\n\n  // --------------------------------------------\n\n  useEffect(() => {\n    if (show === true && isInitRender === false) {\n      setCssClassList(css.navdrawer);\n\n      const duration = 0.5;\n\n      // gsap.to(blur_ref.current, config);\n      tl.current = gsap\n        .timeline()\n        .to(blur_ref.current, {\n          duration,\n          background: 'rgba(0, 0, 255, 0.75)',\n          filter: 'blur(3px)',\n        })\n        .to(\n          navdrawer_ref.current,\n          {\n            duration,\n            xPercent: '100',\n            onReverseComplete: () => {\n              setCssClassList(`${css.navdrawer} ${css.hide}`);\n            },\n          },\n          '<'\n        );\n    } else if (show === false && isInitRender === false) {\n      if (tl) {\n        tl.current.reverse();\n      }\n    }\n\n    setIsInitRender(false);\n  }, [show]);\n\n  // --------------------------------------------\n\n  const navdrawer = (\n    <>\n      <Backdrop show={show} hideHandler={hideHandler} />\n\n      <div ref={navdrawer_ref} className={cssClassList}>\n        Navdrawer\n        <svg\n          onClick={hideHandler}\n          xmlns='http://www.w3.org/2000/svg'\n          width='16'\n          height='16'\n          fill='currentColor'\n          viewBox='0 0 16 16'\n        >\n          <path d='M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z' />\n          <path d='M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z' />\n        </svg>\n      </div>\n    </>\n  );\n  // --------------------------------------------\n\n  return ReactDOM.createPortal(\n    navdrawer,\n    document.getElementById('drawer-hook')\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default Navdrawer;\n","export default __webpack_public_path__ + \"static/media/lena-2.a0a1ab9a.jpg\";","import { useState, useEffect, useRef } from 'react';\n\nimport Modal from './modal/Modal';\nimport Navdrawer from './navdrawer/Navdrawer';\n\nimport i from './lena-2.jpg';\nimport './App.css';\n\n// ==============================================\n\nfunction App() {\n  // --------------------------------------------\n\n  const blur_ref = useRef();\n\n  // --------------------------------------------\n\n  const [showModal, setShowModal] = useState(false);\n  const [showDrawer, setShowDrawer] = useState(false);\n\n  // --------------------------------------------\n\n  const showModalHandler = () => setShowModal(true);\n  const hideModalHandler = () => setShowModal(false);\n\n  const showDrawerHandler = () => setShowDrawer(true);\n  const hideDrawerHandler = () => setShowDrawer(false);\n\n  // --------------------------------------------\n\n  return (\n    <>\n      <Modal\n        show={showModal}\n        hideHandler={hideModalHandler}\n        blur_ref={blur_ref}\n      />\n      <Navdrawer\n        show={showDrawer}\n        hideHandler={hideDrawerHandler}\n        blur_ref={blur_ref}\n      />\n\n      <div ref={blur_ref} className='blur-container'>\n        <button onClick={showModalHandler}>Modal</button>\n        Show Modal: {showModal ? 'show' : 'hide'}\n        <button onClick={showDrawerHandler}>Drawer</button>\n        Show Drawer: {showDrawer ? 'show' : 'hide'}\n        <img src={i} width='80%' alt='' />\n      </div>\n    </>\n  );\n}\n\n// ==============================================\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}